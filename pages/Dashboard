import React, { useEffect, useState, useMemo } from "react";
import { collection, getDocs, doc, getDoc } from "firebase/firestore";
import { db, auth } from "../lib/firebaseConfig";
import { onAuthStateChanged } from "firebase/auth";
import Head from "next/head";
import {
  Users,
  Gamepad,
  Cake,
  BarChart3,
  Trophy,
  PieChart as PieChartIcon, // Icon for Pie Chart
  BarChart as BarChartIcon, // Icon for Bar Chart
  Download, // Icon for download button
} from "lucide-react";
import dynamic from "next/dynamic";

// Dynamically import Recharts components with ssr: false
// Ensures Recharts is loaded and rendered only on the client-side to prevent SSR errors
const PieChart = dynamic(() => import("recharts").then((mod) => mod.PieChart), { ssr: false });
const Pie = dynamic(() => import("recharts").then((mod) => mod.Pie), { ssr: false });
const Cell = dynamic(() => import("recharts").then((mod) => mod.Cell), { ssr: false });
const ResponsiveContainer = dynamic(() => import("recharts").then((mod) => mod.ResponsiveContainer), { ssr: false });
const Legend = dynamic(() => import("recharts").then((mod) => mod.Legend), { ssr: false });
const Tooltip = dynamic(() => import("recharts").then((mod) => mod.Tooltip), { ssr: false });
// New imports for Bar Chart
const BarChart = dynamic(() => import("recharts").then((mod) => mod.BarChart), { ssr: false });
const Bar = dynamic(() => import("recharts").then((mod) => mod.Bar), { ssr: false });
const XAxis = dynamic(() => import("recharts").then((mod) => mod.XAxis), { ssr: false });
const YAxis = dynamic(() => import("recharts").then((mod) => mod.YAxis), { ssr: false });
const CartesianGrid = dynamic(() => import("recharts").then((mod) => mod.CartesianGrid), { ssr: false });

// Colors for Pie Chart and Bar Chart
const COLORS = [
  "#4CAF50", // Green
  "#2196F3", // Blue
  "#FFC107", // Amber
  "#F44336", // Red
  "#9C27B0", // Purple
  "#00BCD4", // Cyan
  "#FFEB3B", // Yellow
  "#E91E63", // Pink
  "#795548", // Brown
  "#607D8B"  // Blue Grey
];

const Dashboard = () => {
  // States for data fetching
  const [memberCount, setMemberCount] = useState(0);
  const [matchCount, setMatchCount] = useState(0);
  const [birthdayCount, setBirthdayCount] = useState(0);
  const [topPlayers, setTopPlayers] = useState([]);
  const [userId, setUserId] = useState(null);
  // UI states
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isClient, setIsClient] = useState(false); // Crucial for SSR handling
  const [chartType, setChartType] = useState('pie'); // 'pie' or 'bar'

  // Effect to determine if the component is mounted on the client-side
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Effect for Firebase Authentication state change
  // This must run only on the client-side
  useEffect(() => {
    if (!isClient) return; // Ensure this only runs on the client after hydration

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        setUserId(null);
        setLoading(false);
        setError("User not authenticated.");
      }
    });
    return () => unsubscribe();
  }, [isClient]); // Dependency on isClient to ensure it runs after client mount

  // Effect for fetching data from Firestore
  useEffect(() => {
    if (!userId) {
        // If no userId and not already an error, set loading to false.
        // This handles cases where user is not authenticated initially.
        if (!error) setLoading(false);
        return;
    }

    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const membersRef = collection(db, "users", userId, "Members");
        const membersSnap = await getDocs(membersRef);
        setMemberCount(membersSnap.size);

        const matchRef = collection(db, "users", userId, "Matches");
        const matchSnap = await getDocs(matchRef);
        const thisMonth = new Date().getMonth() + 1;
        const filteredMatches = matchSnap.docs.filter((doc) => {
          const date = doc.data().matchDate;
          return date && new Date(date).getMonth() + 1 === thisMonth;
        });
        setMatchCount(filteredMatches.length);

        const birthCount = membersSnap.docs.filter((doc) => {
          const birth = doc.data().birthdate;
          return birth && new Date(birth).getMonth() + 1 === thisMonth;
        });
        setBirthdayCount(birthCount.length);

        const month = (new Date().getMonth() + 1).toString().padStart(2, "0");
        const year = new Date().getFullYear();
        const rankRef = doc(db, "users", userId, "Ranking", `${month}-${year}`);
        const rankSnap = await getDoc(rankRef);
        if (rankSnap.exists()) {
          const data = rankSnap.data();
          const players = Object.entries(data)
            .filter(([k]) => k !== "lastUpdatedMonth")
            .map(([name, d]) => ({ name, score: d.score || 0 }))
            .sort((a, b) => b.score - a.score)
            .slice(0, 5); // Limit to top 5 players for the dashboard
          setTopPlayers(players);
        } else {
          setTopPlayers([]);
        }
      } catch (err) {
        console.error("Error fetching dashboard data:", err);
        setError("Failed to load dashboard data. Please try again.");
        // Reset counts on error
        setMemberCount(0);
        setMatchCount(0);
        setBirthdayCount(0);
        setTopPlayers([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [userId, error]); // Re-run when userId or error state changes

  // Memoized function for CSV download to prevent re-creation on every render
  const handleDownloadCSV = useMemo(() => () => {
    if (topPlayers.length === 0) {
      alert("ไม่มีข้อมูลผู้เล่นให้ดาวน์โหลด!");
      return;
    }

    const headers = ["อันดับ", "ชื่อผู้เล่น", "คะแนน"];
    const csvRows = [headers.join(',')];

    topPlayers.forEach((player, index) => {
      const row = [
        index + 1,
        `"${player.name.replace(/"/g, '""')}"`,
        player.score
      ];
      csvRows.push(row.join(','));
    });

    const csvString = csvRows.join('\n');
    // Add BOM for proper UTF-8 handling in Excel
    const blob = new Blob([`\uFEFF${csvString}`], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `top_players_ranking_${new Date().toLocaleDateString('th-TH')}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }, [topPlayers]); // Dependency on topPlayers

  // Loading state UI
  if (loading) {
    return (
      <div className="dashboard-container loading-container">
        <p className="loading-text">กำลังโหลดข้อมูล...</p>
        <div className="spinner"></div>
      </div>
    );
  }

  // Error state UI
  if (error) {
    return (
      <div className="dashboard-container error-container">
        <p className="error-text">เกิดข้อผิดพลาด: {error}</p>
        <p className="error-subtext">โปรดลองเข้าสู่ระบบหรือโหลดหน้าใหม่อีกครั้ง</p>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>แดชบอร์ดระบบจัดการทีม</title>
      </Head>
      <div className="dashboard-container">
        <h1 className="dashboard-heading">
          <BarChart3 size={18} style={{ marginRight: "8px", color: '#3f51b5' }} />
          แดชบอร์ดระบบจัดการทีม
        </h1>

        <div className="stats-grid">
          <div className="stat-card orange-gradient bounce-in">
            <Users size={22} />
            <p className="label">สมาชิกทั้งหมด</p>
            <p className="value">{memberCount} คน</p>
          </div>
          <div className="stat-card green-gradient bounce-in">
            <Gamepad size={22} />
            <p className="label">จำนวนแมตช์ในเดือนนี้</p>
            <p className="value">{matchCount}</p>
          </div>
          <div className="stat-card blue-gradient bounce-in">
            <Cake size={22} />
            <p className="label">วันเกิดสมาชิกในเดือนนี้</p>
            <p className="value">{birthdayCount}</p>
          </div>
        </div>

        <div className="content-grid">
          <div className="ranking-section card">
            <div className="ranking-header">
              <h2>
                <Trophy size={18} style={{ marginRight: 6, color: '#fbc02d' }} />
                ผู้เล่นอันดับสูงสุดประจำเดือน
              </h2>
              {/* Show download button only on client-side and if there are players */}
              {isClient && topPlayers.length > 0 && (
                <button
                  onClick={handleDownloadCSV}
                  className="download-btn hover-grow"
                  title="ดาวน์โหลดข้อมูลอันดับผู้เล่นเป็น Excel"
                >
                  <Download size={16} />
                  <span className="btn-text">Excel</span>
                </button>
              )}
            </div>
            {topPlayers.length > 0 ? (
              <ul className="ranking-list">
                {topPlayers.map((player, index) => (
                  <li key={index} className={`rank rank-${index + 1}`}>
                    <span className="rank-position">อันดับ {index + 1}</span>
                    <span className="rank-name">{player.name}</span>
                    <span className="rank-score">({player.score} คะแนน)</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="no-data">ไม่พบข้อมูลผู้เล่น</p>
            )}
          </div>

          <div className="chart-section card">
            <div className="chart-header">
              <h2>
                {chartType === 'pie' ? (
                  <PieChartIcon size={18} style={{ marginRight: 6, color: '#ff7043' }} />
                ) : (
                  <BarChartIcon size={18} style={{ marginRight: 6, color: '#ff7043' }} />
                )}
                สัดส่วนคะแนนผู้เล่นสูงสุด
              </h2>
              {/* ปุ่มสลับกราฟ */}
              {isClient && topPlayers.length > 0 && topPlayers.some(p => p.score > 0) && (
                <button
                  onClick={() => setChartType(chartType === 'pie' ? 'bar' : 'pie')}
                  className="toggle-chart-btn hover-grow"
                  title={chartType === 'pie' ? "แสดงกราฟแท่ง" : "แสดงกราฟวงกลม"}
                >
                  {chartType === 'pie' ? (
                    <BarChartIcon size={16} />
                  ) : (
                    <PieChartIcon size={16} />
                  )}
                </button>
              )}
            </div>
            {/* Conditional rendering for charts based on chartType state */}
            {isClient && topPlayers.length > 0 && topPlayers.some(p => p.score > 0) ? (
              <ResponsiveContainer width="100%" height={180}>
                {chartType === 'pie' ? (
                  <PieChart>
                    <Pie
                      data={topPlayers}
                      dataKey="score"
                      nameKey="name"
                      cx="50%"
                      cy="50%"
                      outerRadius={50}
                      fill="#8884d8"
                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                      labelLine={false}
                      animationBegin={0}
                      animationDuration={800}
                      animationEasing="ease-out"
                    >
                      {topPlayers.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value, name) => [`${value} คะแนน`, name]} />
                    <Legend wrapperStyle={{ fontSize: '0.65rem', paddingTop: '0px', lineHeight: '1.2' }} />
                  </PieChart>
                ) : (
                  <BarChart data={topPlayers} margin={{ top: 5, right: 10, left: 0, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#ebf0f5" />
                    <XAxis dataKey="name" tick={{ fontSize: 10 }} axisLine={false} tickLine={false} />
                    <YAxis tick={{ fontSize: 10 }} axisLine={false} tickLine={false} />
                    <Tooltip formatter={(value, name) => [`${value} คะแนน`, name]} />
                    <Legend wrapperStyle={{ fontSize: '0.65rem', paddingTop: '0px', lineHeight: '1.2' }} />
                    <Bar dataKey="score" fill={COLORS[0]} radius={[5, 5, 0, 0]}>
                      {topPlayers.map((entry, index) => (
                        <Cell key={`bar-cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Bar>
                  </BarChart>
                )}
              </ResponsiveContainer>
            ) : (
              <p className="no-data">ไม่พบข้อมูลสำหรับกราฟ หรือคะแนนทั้งหมดเป็น 0</p>
            )}
          </div>
        </div>
      </div>

      <style jsx>{`
        .dashboard-container {
          padding: 0.8rem 1rem;
          background: #f8faff;
          min-height: 100vh;
          font-family: 'IBM Plex Sans Thai', sans-serif;
          color: #333;
          box-sizing: border-box;
        }

        /* Loading and Error States */
        .loading-container, .error-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 60vh;
            text-align: center;
            font-size: 0.9rem;
            color: #555;
        }
        .loading-text {
            margin-bottom: 8px;
            font-size: 1.1rem;
            font-weight: 500;
        }
        .error-text {
            color: #d32f2f;
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 3px;
        }
        .error-subtext {
            color: #777;
            font-size: 0.75rem;
        }
        .spinner {
            border: 2px solid rgba(0, 0, 0, 0.1);
            border-left: 2px solid #3b82f6;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .dashboard-heading {
          font-size: 1.4rem;
          font-weight: 700;
          color: #2c3e50;
          display: flex;
          align-items: center;
          margin-bottom: 1.2rem;
          text-shadow: 0.3px 0.3px 0.8px rgba(0,0,0,0.02);
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
          gap: 0.6rem;
          margin-bottom: 1.2rem;
        }

        .stat-card {
          padding: 0.7rem;
          border-radius: 10px;
          color: white;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
          transition: all 0.15s cubic-bezier(0.25, 0.8, 0.25, 1);
          text-align: center;
          min-height: 80px;
          background-size: 200% 200%;
          cursor: default;
        }

        .stat-card:hover {
          transform: translateY(-2px) scale(1.002);
          box-shadow: 0 5px 12px rgba(0, 0, 0, 0.07);
          background-position: right center;
        }

        .stat-card svg {
            margin-bottom: 4px;
            filter: drop-shadow(0 0.5px 0.5px rgba(0,0,0,0.05));
        }

        .stat-card .label {
          margin-top: 4px;
          font-size: 0.75rem;
          font-weight: 500;
          opacity: 0.9;
        }

        .stat-card .value {
          font-size: 1.4rem;
          font-weight: 800;
          margin-top: 2px;
          letter-spacing: 0.1px;
          text-shadow: 0.3px 0.3px 0.8px rgba(0,0,0,0.03);
        }

        .orange-gradient {
          background: linear-gradient(135deg, #FF9800 0%, #FF5722 100%);
        }

        .green-gradient {
          background: linear-gradient(135deg, #8BC34A 0%, #4CAF50 100%);
        }

        .blue-gradient {
          background: linear-gradient(135deg, #03A9F4 0%, #2196F3 100%);
        }

        @keyframes bounceIn {
          0%, 20%, 40%, 60%, 80%, 100% {
            -webkit-animation-timing-function: cubic-bezier(0.215, .61, .355, 1);
            animation-timing-function: cubic-bezier(0.215, .61, .355, 1);
          }
          0% {
            opacity: 0;
            transform: scale3d(.3, .3, .3);
          }
          20% {
            transform: scale3d(1.05, 1.05, 1.05);
          }
          40% {
            transform: scale3d(.9, .9, .9);
          }
          60% {
            opacity: 1;
            transform: scale3d(1.03, 1.03, 1.03);
          }
          80% {
            transform: scale3d(.97, .97, .97);
          }
          100% {
            opacity: 1;
            transform: scale3d(1, 1, 1);
          }
        }
        .bounce-in {
          animation: bounceIn 0.8s;
        }
        .stats-grid > div:nth-child(1) { animation-delay: 0.1s; }
        .stats-grid > div:nth-child(2) { animation-delay: 0.2s; }
        .stats-grid > div:nth-child(3) { animation-delay: 0.3s; }


        .content-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 0.6rem;
        }

        .card {
            background: #ffffff;
            padding: 1.2rem;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
            transition: transform 0.1s ease, box-shadow 0.1s ease;
        }

        .card:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }

        .ranking-header, .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.8rem;
        }

        .ranking-section h2, .chart-section h2 {
          font-size: 1.1rem;
          font-weight: 600;
          display: flex;
          align-items: center;
          color: #2c3e50;
          margin-bottom: 0;
        }

        .download-btn, .toggle-chart-btn {
            background-color: #4CAF50; /* Green for Excel */
            color: white;
            border: none;
            border-radius: 5px;
            padding: 6px 12px;
            font-size: 0.8rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-out, box-shadow 0.2s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .toggle-chart-btn {
            background-color: #007bff; /* Blue for toggle button */
        }

        .download-btn:hover {
            background-color: #45a049;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .toggle-chart-btn:hover {
            background-color: #0056b3;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .download-btn:active, .toggle-chart-btn:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .hover-grow {
            transition: transform 0.2s ease-out;
        }
        .hover-grow:hover {
            transform: scale(1.05);
        }


        .ranking-list {
          padding-left: 0;
          list-style: none;
        }

        .rank {
          font-size: 0.85rem;
          padding: 0.5rem 0;
          border-bottom: 1px solid #ebf0f5;
          display: flex;
          align-items: center;
          justify-content: space-between;
          line-height: 1.2;
        }

        .rank:last-child {
          border-bottom: none;
        }

        .rank-position {
          font-weight: bold;
          margin-right: 6px;
          min-width: 60px;
          text-align: left;
        }

        .rank-name {
          flex-grow: 1;
          font-weight: 500;
          color: #555;
        }

        .rank-score {
            font-weight: 600;
            color: #777;
            font-size: 0.75rem;
            margin-left: 4px;
        }

        .rank-1 .rank-position, .rank-1 .rank-score {
          color: #d4af37;
        }

        .rank-2 .rank-position, .rank-2 .rank-score {
          color: #a8a9ad;
        }

        .rank-3 .rank-position, .rank-3 .rank-score {
          color: #cd7f32;
        }

        .no-data {
          text-align: center;
          color: #888;
          font-style: italic;
          padding: 0.8rem;
          font-size: 0.7rem;
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
          .dashboard-container {
            padding: 0.6rem;
          }
          .dashboard-heading {
            font-size: 1.3rem;
            margin-bottom: 1rem;
          }
          .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
            gap: 0.5rem;
          }
          .stat-card {
            padding: 0.6rem;
            min-height: 75px;
          }
          .stat-card .value {
            font-size: 1.3rem;
          }
          .content-grid {
            gap: 0.5rem;
          }
          .card {
            padding: 1rem;
          }
          .ranking-section h2, .chart-section h2 {
            font-size: 1.1rem;
            margin-bottom: 0.7rem;
          }
          .rank {
            font-size: 0.75rem;
            padding: 0.4rem 0;
          }
          .download-btn, .toggle-chart-btn {
              padding: 5px 10px;
              font-size: 0.75rem;
          }
          .download-btn .btn-text {
              display: none; /* Hide "Excel" text on mobile */
          }
        }

        @media (max-width: 768px) {
          .dashboard-container {
            padding: 0.4rem;
          }
          .dashboard-heading {
            font-size: 1.1rem;
            margin-bottom: 0.6rem;
            justify-content: center;
          }
          .stats-grid {
            grid-template-columns: 1fr;
            gap: 0.5rem;
          }
          .stat-card {
            padding: 0.5rem;
            min-height: 65px;
          }
          .stat-card .value {
            font-size: 1.2rem;
          }
          .content-grid {
            grid-template-columns: 1fr;
            gap: 0.5rem;
          }
          .card {
            padding: 0.8rem;
          }
          .ranking-section h2, .chart-section h2 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
            justify-content: center;
          }
          .rank {
            font-size: 0.7rem;
            padding: 0.3rem 0;
            flex-wrap: wrap;
          }
          .rank-position {
                margin-right: 2px;
                min-width: unset;
            }
            .rank-name {
                min-width: 0;
            }
            .rank-score {
                margin-left: auto;
                padding-left: 1px;
            }
            .ranking-header, .chart-header {
                flex-direction: column;
                align-items: center;
                gap: 8px;
            }
            .ranking-section h2, .chart-section h2 {
                margin-bottom: 0px;
            }
        }
      `}</style>
    </>
  );
};

export default Dashboard;
