// src/pages/Birthday.js
import React, { useState, useEffect, useCallback } from "react";
import Sidebar from "./components/sidebar"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏ò‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

import Swal from "sweetalert2";
import { db } from "../lib/firebaseConfig";
import { collection, getDocs, query, where } from "firebase/firestore";

const Birthday = () => {
  const [birthdayMembers, setBirthdayMembers] = useState([]);
  const [loggedInUsername, setLoggedInUsername] = useState("");
  const [currentUserId, setCurrentUserId] = useState(null);
  const [currentMonthName, setCurrentMonthName] = useState("");
  // FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® currentYear ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ destructuring ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà iterable
  const currentYear = new Date().getFullYear(); 
  const [isLoading, setIsLoading] = useState(true);

  // Helper function to calculate age from birth date (YYYY-MM-DD format)
  const calculateAge = (isoBirthDate) => {
    if (!isoBirthDate) return "N/A";
    const today = new Date();
    const birthDateObj = new Date(isoBirthDate);

    let age = today.getFullYear() - birthDateObj.getFullYear();
    const m = today.getMonth() - birthDateObj.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDateObj.getDate())) {
      age--;
    }
    return age;
  };

  // Function to get month name (current month in Thai)
  const getMonthName = (monthIndex) => {
    const months = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];
    return months[monthIndex];
  };

  // Fetch logged-in user data (username and userId)
  const fetchUserData = async () => {
    const email = localStorage.getItem("loggedInEmail");
    if (email) {
      try {
        const usersRef = collection(db, "users");
        const q = query(usersRef, where("email", "==", email));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          const docSnapshot = querySnapshot.docs[0];
          setLoggedInUsername(docSnapshot.data().username);
          setCurrentUserId(docSnapshot.id);
        } else {
          console.warn("User data not found for email:", email);
          Swal.fire("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", "error");
        }
      } catch (error) {
        console.error("Error fetching user data: ", error);
        Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", "error");
      }
    } else {
      Swal.fire("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "warning");
    }
  };

  // Fetch birthday members for the current month
  const fetchBirthdayMembers = useCallback(async () => {
    if (!currentUserId) {
      setBirthdayMembers([]);
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    try {
      const membersRef = collection(db, `users/${currentUserId}/Members`);
      const allMembersSnapshot = await getDocs(membersRef);
      const allMembersData = allMembersSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      const today = new Date();
      const currentMonth = today.getMonth(); // 0-11
      setCurrentMonthName(getMonthName(currentMonth));

      const filtered = allMembersData.filter(member => {
        if (member.birthDate) {
          // Assuming birthDate is in 'YYYY-MM-DD' string format
          const [year, month, day] = member.birthDate.split('-').map(Number);
          // Month from Firestore (1-12) vs JavaScript month (0-11)
          return month - 1 === currentMonth;
        }
        return false;
      });

      // Sort by day of birth
      filtered.sort((a, b) => {
        const dayA = a.birthDate ? parseInt(a.birthDate.split('-')[2], 10) : 0;
        const dayB = b.birthDate ? parseInt(b.birthDate.split('-')[2], 10) : 0;
        return dayA - dayB;
      });

      setBirthdayMembers(filtered);
    } catch (error) {
      console.error("Error fetching birthday members:", error);
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ", "error");
    } finally {
      setIsLoading(false);
    }
  }, [currentUserId]);

  useEffect(() => {
    fetchUserData();
  }, []);

  useEffect(() => {
    if (currentUserId) {
      fetchBirthdayMembers();
    }
  }, [currentUserId, fetchBirthdayMembers]);

  return (
    <div className="overall-layout">
      <Sidebar />
      <main className="main-content">
        <h2 className="page-title">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô : {currentMonthName}</h2>
        <hr className="title-separator" />

        <div className="birthday-summary-card">
          <div className="summary-icon">üéâ</div>
          <div className="summary-details">
            <h3>‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô<br />
              <span className="current-month-highlight">{currentMonthName}</span> {currentYear}
            </h3>
            <p className="total-birthdays">
              ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î :{" "}
              <strong>{birthdayMembers.length}</strong> ‡∏Ñ‡∏ô
            </p>
          </div>
        </div>

        {isLoading ? (
          <div className="status-message loading-status">
            <div className="spinner"></div>
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î...
          </div>
        ) : (
          <>
            {birthdayMembers.length === 0 ? (
              <div className="status-message no-data-status">
                üòî ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô{currentMonthName}‡∏ô‡∏µ‡πâ
              </div>
            ) : (
              <div className="birthday-grid">
                {birthdayMembers.map((member) => (
                  <div key={member.id} className="birthday-member-card-glam">
                    <div className="card-glam-header">
                      <div className="card-glam-avatar">
                        <span className="glam-emoji">üéÇ</span>
                      </div>
                      <h3 className="member-name-glam">{member.name}</h3>
                      {member.memberId && <span className="member-id-glam">ID: {member.memberId}</span>}
                    </div>

                    <div className="card-glam-details">
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</span>
                        <span className="detail-value-glam date-highlight-glam">
                          {member.birthDate ? new Date(member.birthDate).toLocaleDateString('th-TH', {
                              day: 'numeric',
                              month: 'long',
                              year: 'numeric'
                          }) : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                        </span>
                      </div>
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">‡∏≠‡∏≤‡∏¢‡∏∏:</span>
                        <span className="detail-value-glam age-highlight-glam">{calculateAge(member.birthDate)} ‡∏õ‡∏µ</span>
                      </div>
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">Line ID:</span>
                        <span className="detail-value-glam">{member.lineId || "-"}</span>
                      </div>
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>
                        <span className="detail-value-glam">{member.phone || "-"}</span>
                      </div>
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">‡∏£‡∏∞‡∏î‡∏±‡∏ö:</span>
                        <span className="detail-value-glam">{member.level || "-"}</span>
                      </div>
                      <div className="detail-row-glam">
                        <span className="detail-label-glam">‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå:</span>
                        <span className="detail-value-glam">{member.experience || "-"}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </>
        )}
      </main>

      {/* --- CSS Styles for Birthday.js (Version 3 - Glamorous & Balanced) --- */}
      <style jsx>{`
        /* --- Base & Layout --- */
        .overall-layout {
          display: grid;
          grid-template-columns: 240px 1fr;
          height: 100vh;
        }

        .main-content {
          padding: 28px;
          background-color: #e8f0f7; /* Soft light blue background */
          border-radius: 12px;
          overflow-y: auto;
          font-family: 'Kanit', sans-serif;
        }

        .page-title {
          color: #1a2a47; /* Deep blue-gray */
          font-size: 18px;
          margin-bottom: 20px;
          font-weight: 700;
          display: flex;
          align-items: center;
          gap: 10px;
        }

        .title-separator {
          border: none;
          border-top: 2px solid #d4e0e8;
          margin-bottom: 40px;
        }

        /* --- Birthday Summary Card (Keep current style as it's good) --- */
        .birthday-summary-card {
          background: linear-gradient(135deg, #ffd700, #ff8c00); /* Gold to Orange gradient */
          color: #fff;
          padding: 30px;
          border-radius: 12px;
          margin-bottom: 40px;
          text-align: center;
          box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 25px;
        }

        .summary-icon {
          font-size: 60px;
          line-height: 1;
          text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        }

        .summary-details h3 {
          margin: 0 0 10px 0;
          font-size: 18px;
          font-weight: 600;
          line-height: 1.3;
        }

        .current-month-highlight {
          font-weight: 800;
          font-size: 1.2em;
          color: #ffffff;
          text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
        }

        .total-birthdays {
          font-size: 18px;
          margin-top: 5px;
        }

        .total-birthdays strong {
          font-size: 24px;
          font-weight: 700;
          color: #da190b;
        }

        /* --- NEW BIRTHDAY MEMBER CARD DESIGN (Version Glamorous) --- */
        .birthday-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); /* ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° */
          gap: 30px; /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á */
          padding-top: 15px;
        }

        .birthday-member-card-glam {
          background-color: #ffffff;
          border-radius: 25px; /* ‡∏Ç‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© */
          box-shadow: 0 12px 35px rgba(0, 0, 0, 0.1), /* ‡πÄ‡∏á‡∏≤‡∏´‡∏•‡∏±‡∏Å */
                      0 0 0 2px rgba(255, 255, 255, 0.5) inset; /* ‡∏Ç‡∏≠‡∏ö‡πÅ‡∏™‡∏á‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô */
          overflow: hidden;
          transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
          position: relative;
          display: flex;
          flex-direction: column;
          align-items: center;
          text-align: center;
          padding-bottom: 25px; /* ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */
        }

        .birthday-member-card-glam:hover {
          transform: translateY(-10px) scale(1.02); /* ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ */
          box-shadow: 0 20px 50px rgba(0, 0, 0, 0.25), /* ‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */
                      0 0 0 3px rgba(255, 255, 255, 0.7) inset; /* ‡∏Ç‡∏≠‡∏ö‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô */
        }

        .card-glam-header {
          width: 100%;
          /* Gradient ‡∏™‡∏µ‡∏ó‡∏≠‡∏á-‡∏ä‡∏°‡∏û‡∏π ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤ */
          background: linear-gradient(145deg, #FFDDC1, #FFC0CB); /* Peach to Pink */
          padding: 50px 20px 70px 20px; /* ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö avatar */
          border-bottom-left-radius: 40% 30px; /* ‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© */
          border-bottom-right-radius: 40% 30px;
          position: relative;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          margin-bottom: 30px; /* ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */
        }

        .card-glam-avatar {
          width: 110px; /* ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô */
          height: 110px;
          /* Gradient ‡∏™‡∏µ‡∏ü‡πâ‡∏≤-‡∏°‡πà‡∏ß‡∏á ‡∏™‡∏î‡πÉ‡∏™ */
          background: linear-gradient(45deg, #87CEEB, #9370DB); /* SkyBlue to MediumPurple */
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 60px; /* Emoji ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô */
          box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25), /* ‡πÄ‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô */
                      0 0 0 5px rgba(255, 255, 255, 0.8); /* ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≤‡∏ß‡∏´‡∏ô‡∏≤ */
          position: absolute;
          bottom: -55px; /* ‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á avatar */
          left: 50%;
          transform: translateX(-50%);
          z-index: 10;
        }

        .glam-emoji {
            animation: bounceIn 1.5s ease-out; /* ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏î‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ */
            animation-iteration-count: 1;
        }

        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); opacity: 1; }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); }
        }

        .member-name-glam {
          color: #fff;
          font-size: 26px; /* ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πà‡∏ô */
          font-weight: 800; /* ‡πÄ‡∏Ç‡πâ‡∏°‡∏°‡∏≤‡∏Å */
          margin-top: -20px; /* ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ä‡∏¥‡∏î avatar */
          position: relative;
          z-index: 11;
          text-shadow: 2px 2px 5px rgba(0,0,0,0.3); /* ‡πÄ‡∏á‡∏≤‡∏ä‡∏∑‡πà‡∏≠ */
        }

        .member-id-glam {
          color: #e0f0f7; /* ‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á */
          font-size: 15px;
          margin-top: 8px;
          position: relative;
          z-index: 11;
          background-color: rgba(0, 0, 0, 0.1); /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ */
          padding: 4px 12px;
          border-radius: 20px; /* ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô */
        }

        .card-glam-details {
          width: 100%;
          padding: 10px 25px; /* ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á */
          padding-top: 80px; /* ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ avatar ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á header */
        }

        .detail-row-glam {
          display: flex;
          justify-content: space-between;
          align-items: center; /* ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á */
          padding: 10px 0;
          border-bottom: 1px solid #f0f0f0; /* ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏≤‡∏á‡πÜ */
        }
        .detail-row-glam:last-child {
          border-bottom: none;
        }

        .detail-label-glam {
          font-weight: 600;
          color: #4a6a8a; /* ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏° */
          font-size: 14px;
          flex-shrink: 0;
          margin-right: 15px; /* ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô */
        }

        .detail-value-glam {
          color: #333;
          font-size: 16px;
          text-align: right;
          flex-grow: 1;
        }

        .age-highlight-glam {
          font-weight: 700;
          color: #e74c3c; /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏î‡πÉ‡∏™ */
          font-size: 1.2em;
          letter-spacing: 0.5px; /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ */
        }

        .date-highlight-glam {
          font-weight: 600;
          color: #2ecc71; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */
        }

        /* --- Status Messages (Keep current style) --- */
        .status-message {
          text-align: center;
          padding: 40px;
          font-size: 20px;
          color: #6c757d;
          background-color: #eef2f5;
          border-radius: 10px;
          margin-top: 40px;
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 15px;
        }

        .loading-status {
          color: #007bff;
        }

        .no-data-status {
          color: #6c757d;
        }

        .spinner {
          border: 5px solid #f3f3f3;
          border-top: 5px solid #007bff;
          border-radius: 50%;
          width: 40px;
          height: 40px;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        /* --- Responsive Adjustments --- */
        @media (max-width: 1400px) {
            .birthday-grid {
                grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
                gap: 25px;
            }
        }

        @media (max-width: 1200px) {
            .birthday-grid {
                grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
                gap: 20px;
            }
            .member-name-glam {
                font-size: 24px;
            }
            .card-glam-avatar {
                width: 100px;
                height: 100px;
                font-size: 55px;
                bottom: -50px;
            }
            .card-glam-header {
                padding-bottom: 60px;
            }
            .card-glam-details {
                padding-top: 70px;
            }
        }

        @media (max-width: 1024px) {
          .main-content {
            padding: 20px;
          }
          .page-title {
            font-size: 24px;
          }
          .birthday-grid {
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); /* 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï */
            gap: 20px;
          }
        }

        @media (max-width: 768px) {
          .overall-layout {
            grid-template-columns: 1fr;
          }
          .main-content {
            padding: 15px;
          }
          .page-title {
            font-size: 22px;
            text-align: center;
            justify-content: center;
          }
          .title-separator {
            margin-bottom: 30px;
          }
          .birthday-summary-card {
            flex-direction: column;
            gap: 15px;
            padding: 20px;
          }
          .summary-details h3 {
            font-size: 16px;
          }
          .current-month-highlight {
            font-size: 1.1em;
          }
          .total-birthdays {
            font-size: 16px;
          }
          .total-birthdays strong {
            font-size: 20px;
          }
          .birthday-grid {
            grid-template-columns: 1fr; /* 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */
            gap: 25px;
          }
          .birthday-member-card-glam {
            padding-bottom: 15px;
          }
          .card-glam-header {
            padding: 40px 15px 60px 15px;
          }
          .card-glam-avatar {
            width: 90px;
            height: 90px;
            font-size: 50px;
            bottom: -45px;
          }
          .member-name-glam {
            font-size: 22px;
          }
          .member-id-glam {
            font-size: 14px;
          }
          .card-glam-details {
            padding-top: 60px;
            padding: 0 15px;
          }
          .detail-row-glam {
            padding: 8px 0;
          }
          .detail-label-glam {
            font-size: 13px;
          }
          .detail-value-glam {
            font-size: 15px;
          }
        }
      `}</style>
    </div>
  );
};

export default Birthday;
